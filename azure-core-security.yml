#CI pipeline for the Core Security environment
# https://aka.ms/yaml

name: $(Build.DefinitionName)_$(Build.BuildId)_${{parameters.environment}}

trigger:
  - main

pool:
  vmImage: windows-latest

parameters:
  - name: environment
    displayName: "Select an environment"
    type: string
    default: "development"
    values:
      - "development"
      - "test"
      - "production"
  - name: deploySP
    displayName: "Deploy Core Security configuration?"
    type: boolean
    default: "false"

variables:
  - name: systemname
    value: security
  - name: ServiceConnection
    ${{ if eq(parameters['environment'], 'development') }}:
      value: "D3-CORE-DEV-SECURITY (5efb4946-5bab-4ca6-8a95-834a1c20f0ce)"
    ${{ if eq(parameters['environment'], 'test') }}:
      value: "T3-CORE-TEST-SECURITY (c61a7e1f-ec1a-48cc-8591-9c7b1e7b0a4e)"
    ${{ if eq(parameters['environment'], 'production') }}:
      value: "Y3-CORE-PRODUCTION-SECURITY (9d569d3f-4846-43ac-94ad-19ac3c8676a9)"
  - name: EnvPrefix
    ${{ if eq(parameters['environment'], 'development') }}:
      value: "d3"
    ${{ if eq(parameters['environment'], 'test') }}:
      value: "t3"
    ${{ if eq(parameters['environment'], 'production') }}:
      value: "y3"
  - name: backendServiceArm
    ${{ if eq(parameters['environment'], 'development') }}:
      value: "Y3-APP-DEV-SHAREPOINT (24e769ee-78cf-4a8d-8f6c-05a315caab79)"
    ${{ if eq(parameters['environment'], 'test') }}:
      value: "Y3-APP-STAGING-SHAREPOINT"
    ${{ if eq(parameters['environment'], 'production') }}:
      value: "Y3-CORE (c8be5642-d14b-47b4-b9ef-8080116b2ed0)"

stages:
  - stage: Build
    displayName: "Validate and plan"
    jobs:
      - job:
        displayName: "Validate and plan"
        steps:
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "latest"

          - task: TerraformTaskV4@4
            displayName: "Terraform init: $(Build.DefinitionName)"
            inputs:
              backendServiceArm: "${{variables.backendServiceArm}}"
              backendAzureRmResourceGroupName: "${{variables.EnvPrefix}}-rg-terraform-uksouth-001"
              backendAzureRmStorageAccountName: "${{variables.EnvPrefix}}stcoreterraformuksouth"
              backendAzureRmContainerName: "$(Build.DefinitionName)"
              backendAzureRmKey: "${{parameters.environment}}-core-${{variables.systemname}}.tfstate" # needs to be specific to the repo, will also be specific to the environment

          - task: TerraformTaskV4@4
            displayName: "Terraform validate: $(Build.DefinitionName)"
            inputs:
              command: validate
              workingDirectory: "$(System.DefaultWorkingDirectory)"

          - task: TerraformTaskV4@4
            displayName: "Terraform plan: $(Build.DefinitionName)"
            inputs:
              provider: "azurerm"
              command: "plan"
              commandOptions: "-var-file=./variables/terraform.tfvars -var-file=./variables/${{parameters.environment}}.tfvars -out=$(Build.ArtifactStagingDirectory)/${{parameters.environment}}-core-${{variables.systemname}}.tfplan"
              environmentServiceNameAzureRM: "${{variables.ServiceConnection}}"

          - task: PublishBuildArtifacts@1
            displayName: "Publishing artifacts"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"

  - stage: Deploy
    displayName: "Check, approve and deploy"
    condition: and(succeeded(), eq('${{parameters.deploySP}}', true))
    jobs:
      - job: WaitForValidation
        timeoutInMinutes: 120
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: "Wait for approval"
            timeoutInMinutes: 90
            inputs:
              notifyUsers: "$(PipelineValidators)"
              instructions: "Please check output of tfplan and respond appropriately"

      - job: TerraformDeploy
        displayName: "TerraformDeploy: Applying new configuration"
        dependsOn: WaitForValidation
        pool:
          vmImage: windows-latest
        steps:
          - task: TerraformInstaller@1
            displayName: "Install Terraform latest"
            inputs:
              terraformVersion: "latest"

          - task: TerraformTaskV4@4
            displayName: "Terraform init: $(Build.DefinitionName)"
            inputs:
              backendServiceArm: "${{variables.backendServiceArm}}"
              backendAzureRmResourceGroupName: "${{variables.EnvPrefix}}-rg-terraform-uksouth-001"
              backendAzureRmStorageAccountName: "${{variables.EnvPrefix}}stcoreterraformuksouth"
              backendAzureRmContainerName: "$(Build.DefinitionName)"
              backendAzureRmKey: "${{parameters.environment}}-core-${{variables.systemname}}.tfstate" # needs to be specific to the repo, will also be specific to the environment

          - task: DownloadBuildArtifacts@1
            displayName: "Downloading pipeline artifacts"
            inputs:
              buildType: "current"
              downloadType: "specific"
              itemPattern: '**\*.tfplan'
              downloadPath: "$(Pipeline.Workspace)"

          - task: TerraformTaskV4@4
            displayName: "Terraform: Apply"
            inputs:
              command: apply
              workingDirectory: "$(System.DefaultWorkingDirectory)"
              commandOptions: '$(Pipeline.Workspace)\drop\${{parameters.environment}}-core-${{variables.systemname}}.tfplan'
              environmentServiceNameAzureRM: "${{variables.ServiceConnection}}"

          - task: DeleteFiles@1
            displayName: "Removing sources folder"
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)"
              Contents: "**"
              RemoveDotFiles: true
